version: '3.8'

services:
  # Frontend service
  frontend:
    image: ${DOCKER_REGISTRY:-radiox}/radiox-frontend:${TAG:-latest}
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_SSL_PORT:-443}:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${API_URL:-https://api.radiox.com}
    networks:
      - frontend-network
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API service
  backend:
    image: ${DOCKER_REGISTRY:-radiox}/radiox-backend:${TAG:-latest}
    restart: unless-stopped
    depends_on:
      - mongo
      - redis
    ports:
      - "${API_PORT:-5000}:5000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://${MONGO_USERNAME:-radiox}:${MONGO_PASSWORD:-password}@mongo:27017/${MONGO_DB:-radiox}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - JWT_EXPIRE=7d
      - COOKIE_SECRET=${COOKIE_SECRET:-your-cookie-secret}
      - FRONTEND_URL=${FRONTEND_URL:-https://radiox.com}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-radiox-media}
      - X_API_KEY=${X_API_KEY}
      - X_API_SECRET=${X_API_SECRET}
      - GOOGLE_CLOUD_TTS_KEY=${GOOGLE_CLOUD_TTS_KEY}
      - TZ=UTC
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Processing service for audio conversion
  processing:
    image: ${DOCKER_REGISTRY:-radiox}/radiox-processing:${TAG:-latest}
    restart: unless-stopped
    depends_on:
      - mongo
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - PORT=5001
      - MONGODB_URI=mongodb://${MONGO_USERNAME:-radiox}:${MONGO_PASSWORD:-password}@mongo:27017/${MONGO_DB:-radiox}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-radiox-media}
      - GOOGLE_CLOUD_TTS_KEY=${GOOGLE_CLOUD_TTS_KEY}
      - TZ=UTC
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # MongoDB database
  mongo:
    image: mongo:5.0
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-radiox}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_DB:-radiox}
    ports:
      - "127.0.0.1:27017:27017"
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    command: ["--wiredTigerCacheSizeGB", "1", "--auth"]

  # Redis for caching and session storage
  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  # Backup service
  backup:
    image: alpine:latest
    restart: unless-stopped
    volumes:
      - ./scripts:/scripts
      - ./backups:/backups
      - mongo-data:/data/db:ro
    environment:
      - MONGODB_URI=mongodb://${MONGO_USERNAME:-radiox}:${MONGO_PASSWORD:-password}@mongo:27017/${MONGO_DB:-radiox}?authSource=admin
      - DATABASE_NAME=${MONGO_DB:-radiox}
      - S3_BUCKET=${BACKUP_S3_BUCKET:-radiox-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - RETENTION_DAYS=7
    networks:
      - backend-network
    depends_on:
      - mongo
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "apk add --no-cache mongodb-tools aws-cli &&
      chmod +x /scripts/backup-database.sh &&
      echo '0 2 * * * /scripts/backup-database.sh >> /backups/cron.log 2>&1' > /var/spool/cron/crontabs/root &&
      crond -f -d 8"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  mongo-data:
  redis-data:
